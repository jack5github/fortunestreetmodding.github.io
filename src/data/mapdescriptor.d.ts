/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes the properties of a Fortune Street board
 */
export type MapDescriptor = MapDescriptor1 & MapDescriptor2;
export type MusicFile = null | string;
/**
 * @minItems 2
 * @maxItems 12
 */
export type DistrictNames =
  | [string, string]
  | [string, string, string]
  | [string, string, string, string]
  | [string, string, string, string, string]
  | [string, string, string, string, string, string]
  | [string, string, string, string, string, string, string]
  | [string, string, string, string, string, string, string, string]
  | [string, string, string, string, string, string, string, string, string]
  | [string, string, string, string, string, string, string, string, string, string]
  | [string, string, string, string, string, string, string, string, string, string, string]
  | [string, string, string, string, string, string, string, string, string, string, string, string];
export type MapDescriptor2 = {
  [k: string]: unknown;
};

export interface MapDescriptor1 {
  name: Localization;
  desc: Localization1;
  /**
   * Easy or Standard rules
   */
  ruleSet: "Easy" | "Standard";
  /**
   * Mario or DragonQuest theme
   */
  theme: "Mario" | "DragonQuest";
  /**
   * The starting cash for each player
   */
  initialCash: number;
  /**
   * The target net worth needed to win
   */
  targetAmount: number;
  /**
   * The constant amount of cash each player gets for every promotion
   */
  baseSalary: number;
  /**
   * The increasing amount of cash each player gets for every promotion
   */
  salaryIncrement: number;
  /**
   * The maximum roll a player can get on this map. Lower than 4 or higher than 9 is known to cause crashes
   */
  maxDiceRoll: number;
  /**
   * The filename of the main frb board file without the file extension
   */
  frbFile1?: string;
  /**
   * The filename to the second frb file used for dynamic maps with switches
   */
  frbFile2?: string;
  /**
   * The filename to the third frb file used for dynamic maps with switches
   */
  frbFile3?: string;
  /**
   * The filename to the fourth frb file used for dynamic maps with switches
   */
  frbFile4?: string;
  /**
   * The filenames to the frb file(s) used (switches will cycle through them in order)
   *
   * @minItems 1
   */
  frbFiles?: [string, ...string[]];
  /**
   * The origin points under which the squares should rotate around during the switch board change animation sequence. When this property is omitted the squares will move linearly to their destination.
   */
  switchRotationOriginPoints?: {
    x: number;
    y: number;
  }[];
  /**
   * Controls whether the map shall loop around the edges
   */
  looping?: {
    mode: "Vertical" | "Both" | "None";
    /**
     * The radius of the cylindrical shape of the map. The higher this value the further apart from each other squares will be.
     */
    radius: number;
    /**
     * The horizontal padding between squares on the map. Used to adjust the distances between squares so that they are more uniform in all directions.
     */
    horizontalPadding: number;
    /**
     * The amount of squares this map has spread along the vertical axis. E.g. if you have 3 squares stacked on top of each other, the value here would be 3.
     */
    verticalSquareCount: number;
  };
  /**
   * The tour configuration for single player mode
   */
  tourMode: {
    /**
     * How many players need to get bankrupted till the game ends.
     */
    bankruptcyLimit?: number;
    /**
     * The starting cash for each player during tour mode only. If omitted, the normal initialCash is used.
     */
    initialCash?: number;
    /**
     * The first opponent.
     */
    opponent1:
      | "Mario"
      | "Luigi"
      | "Peach"
      | "Yoshi"
      | "Bowser"
      | "Toad"
      | "DonkeyKong"
      | "Wario"
      | "Waluigi"
      | "Daisy"
      | "Birdo"
      | "DiddyKong"
      | "BowserJr"
      | "Slime"
      | "Princessa"
      | "Kiryl"
      | "Yangus"
      | "Angelo"
      | "Platypunk"
      | "Bianca"
      | "Alena"
      | "Carver"
      | "Jessica"
      | "Dragonlord"
      | "Stella"
      | "Patty";
    /**
     * The second opponent.
     */
    opponent2:
      | "Mario"
      | "Luigi"
      | "Peach"
      | "Yoshi"
      | "Bowser"
      | "Toad"
      | "DonkeyKong"
      | "Wario"
      | "Waluigi"
      | "Daisy"
      | "Birdo"
      | "DiddyKong"
      | "BowserJr"
      | "Slime"
      | "Princessa"
      | "Kiryl"
      | "Yangus"
      | "Angelo"
      | "Platypunk"
      | "Bianca"
      | "Alena"
      | "Carver"
      | "Jessica"
      | "Dragonlord"
      | "Stella"
      | "Patty";
    /**
     * The third opponent.
     */
    opponent3:
      | "Mario"
      | "Luigi"
      | "Peach"
      | "Yoshi"
      | "Bowser"
      | "Toad"
      | "DonkeyKong"
      | "Wario"
      | "Waluigi"
      | "Daisy"
      | "Birdo"
      | "DiddyKong"
      | "BowserJr"
      | "Slime"
      | "Princessa"
      | "Kiryl"
      | "Yangus"
      | "Angelo"
      | "Platypunk"
      | "Bianca"
      | "Alena"
      | "Carver"
      | "Jessica"
      | "Dragonlord"
      | "Stella"
      | "Patty";
    /**
     * The rank the player must be at the end of the game for attaining the gold medal.
     */
    clearRank?: number;
  };
  music?: Music;
  /**
   * The background music.
   */
  bgmId?:
    | "BGM_MAP_TRODAIN"
    | "BGM_MAP_ANGEL"
    | "BGM_MAP_GHOSTSHIP"
    | "BGM_MAP_SLABACCA"
    | "BGM_MAP_SINOKAZAN"
    | "BGM_MAP_KANDATA"
    | "BGM_MAP_STADIUM"
    | "BGM_MAP_STARSHIP"
    | "BGM_MAP_CIRCUIT"
    | "BGM_MAP_YOSHI"
    | "BGM_MAP_DOLPIC"
    | "BGM_MAP_PEACH"
    | "BGM_MAP_ALEFGARD"
    | "BGM_MAP_SMB"
    | "BGM_MAP_KOOPA"
    | "BGM_MAP_EGG"
    | "BGM_MAP_MAJINZOU"
    | "BGM_MAP_DHAMA"
    | "BGM_MENU"
    | "BGM_MAP_KANDATA_old"
    | "BGM_MAP_ALEFGARD_old"
    | "BGM_MAP_TRODAIN_old"
    | "BGM_MAP_DHAMA_old"
    | "BGM_GOALPROP"
    | "BGM_WINNER"
    | "BGM_CHANCECARD"
    | "BGM_STOCK"
    | "BGM_AUCTION"
    | "BGM_CASINO_BLOCK"
    | "BGM_CASINO_SLOT"
    | "BGM_CASINO_RACE"
    | "BGM_TITLE"
    | "BGM_SAVELOAD"
    | "BGM_SAVELOAD_old"
    | "BGM_WIFI"
    | "BGM_ENDING";
  /**
   * The background of the map. You can provide your own background without the file extension or choose one of original ones.
   */
  background: string;
  /**
   * The map icon which to display at the map select screen. You can provide your own map icon as a png file without the file extension or choose one of the original ones.
   */
  mapIcon?: string;
  mutators?: Mutators;
  districtNames?: {
    en: DistrictNames;
    de?: DistrictNames;
    fr?: DistrictNames;
    it?: DistrictNames;
    es?: DistrictNames;
    jp?: DistrictNames;
  };
  /**
   * The venture cards which are enabled for this map.
   *
   * @minItems 128
   * @maxItems 128
   */
  ventureCards?: [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ];
  /**
   * The (preferably) lowercase custom shop names for this map.
   */
  shopNames?: {
    en?: ShopNames;
    de?: ShopNames;
    fr?: ShopNames;
    it?: ShopNames;
    es?: ShopNames;
    jp?: ShopNames;
  };
  /**
   * The uppercase custom shop names for this map.
   */
  capitalShopNames?: {
    en?: ShopNames;
    de?: ShopNames;
    fr?: ShopNames;
    it?: ShopNames;
    es?: ShopNames;
    jp?: ShopNames;
  };
  /**
   * The change log logs the different addition, removals and changes made for this map.
   */
  changelog?: {
    version: number | string;
    added?: string[] | string;
    changed?: string[] | string;
    removed?: string[] | string;
  }[];
  /**
   * The authors that have worked on this map.
   */
  authors?: {
    name: string;
    url?: string;
  }[];
  /**
   * Additional notes of the map to be displayed on the website. Markdown supported.
   */
  notes?: string;
  /**
   * Tags which are associated with this map.
   */
  tags?: string[];
}
/**
 * The name of the map
 */
export interface Localization {
  en: string;
  de?: string;
  fr?: string;
  it?: string;
  es?: string;
  jp?: string;
}
/**
 * The description of the map which shall be displayed in the map selection screen
 */
export interface Localization1 {
  en: string;
  de?: string;
  fr?: string;
  it?: string;
  es?: string;
  jp?: string;
}
/**
 * The custom background music and jingles.
 */
export interface Music {
  /**
   * List of download URLs.
   */
  download?: null | string | string[];
  /**
   * The looping map main background music.
   */
  map?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when a player is buying or selling stocks.
   */
  stock?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when a player is picking a venture card.
   */
  ventureCards?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when an auction is taking place.
   */
  auction?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when a player reaches the target net worth.
   */
  targetMet?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when a player wins the match.
   */
  win?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a guest appears.
   */
  guestAppear?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a guest leaves.
   */
  guestLeave?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when venture card #13 is picked.
   */
  badVentureCard?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when the shops of a player close.
   */
  takeAbreak?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a Mii character gets promoted.
   */
  promotionMii?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a character from Mario gets promoted.
   */
  promotionMario?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a character from Dragon Quest gets promoted.
   */
  promotionDragonQuest?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a shop is forcefully bought from another player.
   */
  forcedBuyout?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a player owns all shops in a district.
   */
  domination?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a player bankrupts.
   */
  bankruptcy?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when the round the blocks mini game is being played.
   */
  roundTheBlocks?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a player wins something during the round the blocks mini game.
   */
  roundTheBlocksWin?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a player gets triple seven during the round the blocks mini game.
   */
  roundTheBlocks777?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when the round the memory block mini game is being played.
   */
  memoryBlock?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when the dart of gold mini game is being played.
   */
  dartOfGold?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when the players are picking their racing slime.
   */
  slurpodromeSelect?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played at the start of the race.
   */
  slurpodromeStart?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The looping music played when the slimes are racing.
   */
  slurpodromeRace?: MusicFile | [MusicFile, ...MusicFile[]];
  /**
   * The jingle played when a slime reaches the finish line.
   */
  slurpodromeWin?: MusicFile | [MusicFile, ...MusicFile[]];
}
export interface Mutators {
  /**
   * Whenever a player stops at a shop of an opponent, the die must be rolled. Then, the price to be paid is multiplied with whatever was rolled.
   */
  rollShopPriceMultiplier?: {
    enabled?: boolean;
    maxRoll?: number;
  };
  /**
   * A flat multiplier to all shop prices. Applies to 3-star shops as well but not to anything that is not considered a shop, like for example the circus tent.
   */
  shopPrice?: {
    enabled?: boolean;
    numerator?: number;
    denominator?: number;
    constant?: number;
    /**
     * Whether to scale the shop models accordingly.
     */
    affectShopRank?: boolean;
  };
  /**
   * A flat multiplier to all stock values.
   */
  stockPrice?: {
    enabled?: boolean;
    numerator?: number;
    denominator?: number;
    constant?: number;
  };
}
export interface ShopNames {
  /**
   * This interface was referenced by `ShopNames`'s JSON-Schema definition
   * via the `patternProperty` "^(?:100|[1-9][0-9]?)$".
   */
  [k: string]: string;
}
